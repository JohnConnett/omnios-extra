diff -wpruN '--exclude=*.orig' a~/deps/pkg/mod/github.com/!azure/azure-storage-blob-go@v0.8.0/azblob/zc_mmf_unix.go a/deps/pkg/mod/github.com/!azure/azure-storage-blob-go@v0.8.0/azblob/zc_mmf_unix.go
--- a~/deps/pkg/mod/github.com/!azure/azure-storage-blob-go@v0.8.0/azblob/zc_mmf_unix.go	1970-01-01 00:00:00
+++ a/deps/pkg/mod/github.com/!azure/azure-storage-blob-go@v0.8.0/azblob/zc_mmf_unix.go	1970-01-01 00:00:00
@@ -1,25 +1,25 @@
-// +build linux darwin freebsd openbsd netbsd dragonfly
+// +build linux darwin freebsd openbsd netbsd dragonfly illumos
 
 package azblob
 
 import (
 	"os"
-	"syscall"
+	"golang.org/x/sys/unix"
 )
 
 type mmf []byte
 
 func newMMF(file *os.File, writable bool, offset int64, length int) (mmf, error) {
-	prot, flags := syscall.PROT_READ, syscall.MAP_SHARED // Assume read-only
+	prot, flags := unix.PROT_READ, unix.MAP_SHARED // Assume read-only
 	if writable {
-		prot, flags = syscall.PROT_READ|syscall.PROT_WRITE, syscall.MAP_SHARED
+		prot, flags = unix.PROT_READ|unix.PROT_WRITE, unix.MAP_SHARED
 	}
-	addr, err := syscall.Mmap(int(file.Fd()), offset, length, prot, flags)
+	addr, err := unix.Mmap(int(file.Fd()), offset, length, prot, flags)
 	return mmf(addr), err
 }
 
 func (m *mmf) unmap() {
-	err := syscall.Munmap(*m)
+	err := unix.Munmap(*m)
 	*m = nil
 	if err != nil {
 		panic("if we are unable to unmap the memory-mapped file, there is serious concern for memory corruption")
