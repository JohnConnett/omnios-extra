
CVE-2019-9511
CVE-2019-9513
CVE-2019-9516

diff -wpruN '--exclude=*.orig' a~/src/http/v2/ngx_http_v2.c a/src/http/v2/ngx_http_v2.c
--- a~/src/http/v2/ngx_http_v2.c	1970-01-01 00:00:00
+++ a/src/http/v2/ngx_http_v2.c	1970-01-01 00:00:00
@@ -275,6 +275,7 @@ ngx_http_v2_init(ngx_event_t *rev)
     h2scf = ngx_http_get_module_srv_conf(hc->conf_ctx, ngx_http_v2_module);
 
     h2c->concurrent_pushes = h2scf->concurrent_pushes;
+    h2c->priority_limit = h2scf->concurrent_streams;
 
     h2c->pool = ngx_create_pool(h2scf->pool_size, h2c->connection->log);
     if (h2c->pool == NULL) {
@@ -1548,6 +1549,14 @@ ngx_http_v2_state_process_header(ngx_htt
         header->name.len = h2c->state.field_end - h2c->state.field_start;
         header->name.data = h2c->state.field_start;
 
+        if (header->name.len == 0) {
+            ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
+                          "client sent zero header name length");
+
+            return ngx_http_v2_connection_error(h2c,
+                                                NGX_HTTP_V2_PROTOCOL_ERROR);
+        }
+
         return ngx_http_v2_state_field_len(h2c, pos, end);
     }
 
@@ -1798,6 +1807,13 @@ ngx_http_v2_state_priority(ngx_http_v2_c
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
     }
 
+    if (--h2c->priority_limit == 0) {
+        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
+                      "client sent too many PRIORITY frames");
+
+        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_ENHANCE_YOUR_CALM);
+    }
+
     if (end - pos < NGX_HTTP_V2_PRIORITY_SIZE) {
         return ngx_http_v2_state_save(h2c, pos, end,
                                       ngx_http_v2_state_priority);
@@ -3112,6 +3128,8 @@ ngx_http_v2_create_stream(ngx_http_v2_co
         h2c->processing++;
     }
 
+    h2c->priority_limit += h2scf->concurrent_streams;
+
     return stream;
 }
 
@@ -3249,10 +3267,6 @@ ngx_http_v2_validate_header(ngx_http_req
     ngx_uint_t                 i;
     ngx_http_core_srv_conf_t  *cscf;
 
-    if (header->name.len == 0) {
-        return NGX_ERROR;
-    }
-
     r->invalid_header = 0;
 
     cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
@@ -4335,6 +4349,8 @@ ngx_http_v2_close_stream(ngx_http_v2_str
      */
     pool = stream->pool;
 
+    h2c->frames -= stream->frames;
+
     ngx_http_free_request(stream->request, rc);
 
     if (pool != h2c->state.pool) {
diff -wpruN '--exclude=*.orig' a~/src/http/v2/ngx_http_v2.h a/src/http/v2/ngx_http_v2.h
--- a~/src/http/v2/ngx_http_v2.h	1970-01-01 00:00:00
+++ a/src/http/v2/ngx_http_v2.h	1970-01-01 00:00:00
@@ -122,6 +122,7 @@ struct ngx_http_v2_connection_s {
     ngx_uint_t                       processing;
     ngx_uint_t                       frames;
     ngx_uint_t                       idle;
+    ngx_uint_t                       priority_limit;
 
     ngx_uint_t                       pushing;
     ngx_uint_t                       concurrent_pushes;
@@ -192,6 +193,8 @@ struct ngx_http_v2_stream_s {
 
     ngx_buf_t                       *preread;
 
+    ngx_uint_t                       frames;
+
     ngx_http_v2_out_frame_t         *free_frames;
     ngx_chain_t                     *free_frame_headers;
     ngx_chain_t                     *free_bufs;
diff -wpruN '--exclude=*.orig' a~/src/http/v2/ngx_http_v2_filter_module.c a/src/http/v2/ngx_http_v2_filter_module.c
--- a~/src/http/v2/ngx_http_v2_filter_module.c	1970-01-01 00:00:00
+++ a/src/http/v2/ngx_http_v2_filter_module.c	1970-01-01 00:00:00
@@ -1665,18 +1665,30 @@ ngx_http_v2_filter_get_data_frame(ngx_ht
     ngx_buf_t                *buf;
     ngx_chain_t              *cl;
     ngx_http_v2_out_frame_t  *frame;
+    ngx_http_v2_connection_t  *h2c;
 
     frame = stream->free_frames;
+    h2c = stream->connection;
 
     if (frame) {
         stream->free_frames = frame->next;
 
-    } else {
+    } else if (h2c->frames < 10000) {
         frame = ngx_palloc(stream->request->pool,
                            sizeof(ngx_http_v2_out_frame_t));
         if (frame == NULL) {
             return NULL;
         }
+
+        stream->frames++;
+        h2c->frames++;
+
+    } else {
+        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
+                      "http2 flood detected");
+
+        h2c->connection->error = 1;
+        return NULL;
     }
 
     flags = last->buf->last_buf ? NGX_HTTP_V2_END_STREAM_FLAG : 0;
